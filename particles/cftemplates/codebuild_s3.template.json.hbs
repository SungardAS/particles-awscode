{{#layout}}

  {{#metadata logicalId="AWS::CloudFormation::Interface"}}
    "ParameterGroups" : [
      {
        "Label" : { "default" : "Project" },
        "Parameters" : [ "ProjectName", "ProjectDescription", "ProjectEncryptionKey", "ProjectServiceRole" ]
      },
      {
        "Label" : { "default":"Source" },
        "Parameters" : [ "SourceLocation" ]
      },
      {
        "Label" : { "default":"Environment" },
        "Parameters" : [ "EnvironmentComputeType", "EnvironmentImage", "EnvironmentType" ]
      },
      {
        "Label" : { "default":"Artifacts" },
        "Parameters" : [ "ArtifactsLocation", "ArtifactsPath", "ArtifactsNamespaceType", "ArtifactsName", "ArtifactsType", "ArtifactsPackaging" ]
      }
    ]
  {{/metadata}}

  {{parameter "codebuild/project_name" logicalId="ProjectName" }}
  {{parameter "codebuild/project_description" logicalId="ProjectDescription"}}
  {{parameter "codebuild/project_encryption_key" logicalId="ProjectEncryptionKey" optional=true}}
  {{
    parameter "codebuild/project_service_role"
    logicalId="ProjectServiceRole"
    optional=true
    description="The ARN of an existing IAM role.  If left blank a new role will be created"
  }}
  {{set "m:core" "empty_conditions" parameterLogicalId="ProjectServiceRole"}}

  {{
    parameter "codebuild/artifacts_location"
    logicalId="ArtifactsLocation"
    description="Name of the output bucket. If left blank, one will be created."
    optional=true
  }}
  {{set "m:core" "empty_conditions" parameterLogicalId="ArtifactsLocation"}}

  {{parameter "codebuild/artifacts_name" logicalId="ArtifactsName" }}
  {{parameter "codebuild/artifacts_namespace_type" logicalId="ArtifactsNamespaceType"}}
  {{parameter "codebuild/artifacts_packaging" logicalId="ArtifactsPackaging"}}
  {{parameter "codebuild/artifacts_path" logicalId="ArtifactsPath" optional=true}}
  {{parameter "codebuild/artifacts_type" logicalId="ArtifactsType"}}

  {{parameter "codebuild/environment_compute_type" logicalId="EnvironmentComputeType"}}
  {{parameter "codebuild/environment_image" logicalId="EnvironmentImage"}}
  {{parameter "codebuild/environment_type" logicalId="EnvironmentType"}}

  {{parameter "codebuild/source_location" logicalId="SourceLocation" optional=true}}
  {{set "m:core" "empty_conditions" parameterLogicalId="SourceLocation"}}


  {{#condition logicalId="CreateBucketCondition"}}
    {{fnOr "ArtifactsLocationIsEmpty" "SourceLocationIsEmpty"}}
  {{/condition}}

  {{
    resource "m:core" "spec"
    type="AWS::IAM::Role"
    logicalId="CodeBuildServiceRole"
    condition="ProjectServiceRoleIsEmpty"
    AssumeRolePolicyDocument=(partial "codebuild/iam/trust_policy_statement")
  }}

  {{
    resource "m:core" "spec"
    type="AWS::S3::Bucket"
    logicalId="CodeBuildBucket"
    condition="CreateBucketCondition"
  }}

  {{
    resource "m:core" "spec"
    type="AWS::IAM::ManagedPolicy"
    logicalId="CodeBuildManagedPolicy"
    Description=(fnSub "ManagedPolicy for CodeBuild project ${ProjectName}")
    PolicyDocument=(
      partial "codebuild/iam/policy_document"
      statement=(
        arrayify
        (partial "codebuild/iam/logs_statement" logsname=(ref "ProjectName") )
        (
          partial "codebuild/iam/artifacts_bucket_statement"
          s3bucket=(
            fnIf "ArtifactsLocationIsPopulated"
            (ref "ArtifactsLocation")
            (ref "CodeBuildBucket")
          )
        )
        (
          partial "codebuild/iam/s3_source_object_statement"
          s3location=(
            fnIf "SourceLocationIsPopulated"
            (ref "SourceLocation")
            (fnSub "${CodeBuildBucket}/sources/${ProjectName}.zip")
          )
        )
      )
    )
    Roles=(arrayify
      (
        fnIf "ProjectServiceRoleIsPopulated"
        (ref "ProjectServiceRole")
        (ref "CodeBuildServiceRole")
      )
    )
  }}

  {{
    resource "m:core" "spec"
    type="AWS::CodeBuild::Project"
    logicalId="Project"
    Description=(ref "ProjectDescription")
    ServiceRole=(fnIf "ProjectServiceRoleIsPopulated" (ref "ProjectServiceRole") (ref "CodeBuildServiceRole"))
    Name=(ref "ProjectName")
    Artifacts=(
      helper "m:core" "propertySpec" "AWS::CodeBuild::Project.Artifacts"
      Location=(
        fnIf "ArtifactsLocationIsPopulated"
        (ref "ArtifactsLocation")
        (ref "CodeBuildBucket")
      )
      Name=(ref "ArtifactsName")
      NamespaceType=(ref "ArtifactsNamespaceType")
      Packaging=(ref "ArtifactsPackaging")
      Path=(ref "ArtifactsPath")
      Type=(ref "ArtifactsType")
    )
    Environment=(
      helper "m:core" "propertySpec" "AWS::CodeBuild::Project.Environment"
      ComputeType=(ref "EnvironmentComputeType")
      Image=(ref "EnvironmentImage")
      Type=(ref "EnvironmentType")
    )
    Source=(
      helper "m:core" "propertySpec" "AWS::CodeBuild::Project.Source"
      Location=(
        fnIf "SourceLocationIsPopulated"
        (ref "SourceLocation")
        (fnSub "${CodeBuildBucket}/sources/${ProjectName}.zip")
      )
      Type="S3"
    )

  }}

{{/layout}}
